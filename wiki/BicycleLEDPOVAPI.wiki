#summary API definition to interaction between HaRdware and SoFtware.

Connecting Bicycle LED POV hardware to PC using an USB cable, a new virtual serial port will appear on PC. Commands are sent to the virtual serial port to interact with Bicycle LED POV HaRdware.

The API have two parts, the “base” one should always be implemented on each hardware and provides minimum functionality while the BicycleLEDPOVExtendedAPI part differs on each hardware and is not necessary to be implement.

=Base API=
===Command not implemented===

Input value(s):
|| *byte number* || *content* ||
|| 01 || xx ||

Output value(s):
|| *byte number* || *content* ||
|| 01 || lenght of the next string. ||
|| 02 and following bytes || "command not implemented". The string must be terminated with a null char. ||

==Hardware==
===Command 1: Get identificacion string===

Input value(s):
|| *byte number* || *content* ||
|| 01 || 01 ||

Output value(s):
|| *byte number* || *content* ||
|| 01 || lenght of the next string. ||
|| 02 and following bytes || Example string: "Bicycle LED POV r1.1 fw1.0 20081022". The string must be terminated with a null char. ||

===Command 2: Get hardware properties===

Input value(s):
|| *byte number* || *content* ||
|| 02 || 02 ||

Output value(s):
|| *byte number* || *content* ||
|| 01 || lenght of the next following bytes. ||
|| 02 || API version. ||
|| 03 || extended API version. ||
|| 04 || firmware version. ||
|| 05 || byte 01 of number of radial lines. ||
|| 06 || byte 02 of number of radial lines. ||
|| 07 || byte 01 of number of LEDs per radial line. ||
|| 08 || byte 02 of number of LEDs per radial line. ||
|| 09 || byte 01 of number of animations images colors properties. ||
|| 10 || byte 02 of number of animations images colors properties. ||
|| 11 || byte 03 of number of animations images colors properties. ||
|| 12 || byte 04 of number of animations images colors properties. ||
|| 13 || byte 01 of number of number of independent LED-strips. ||

API version: byte_1

Extended API version: byte_2. Hardware returns value 0 if do not support any [BicycleLEDPOVExtendedAPI extended API], otherwise returns the version of [BicycleLEDPOVExtendedAPI extended API].

Firmware version: byte_3

Number of radial lines: byte_4; byte_5

Number of LEDs per radial line: byte_6; byte_7

Animations images colors properties: byte_8; byte_9; byte_10; byte_11. Byte_8 value is the number of bits per channel of a monochrome image type (hardware-supported), if hardware-supported image type is a color one, the value should be 0. Byte_9, byte_10 and byte_11 have the values of bits of each R, G, B channels, respectively. If hardware-supported image type is a monochrome one, this three bytes have values of 0.

Number of independent LED-strips: byte_12

Example:
   * values sent to hardware: `[`1`]`
   * values received from hardware: `[`0`]` - `[`16`]` - `[`16`]` - `[`8`]` - `[`1`]` `[`0`]`- `[`0`]` `[`32`]` - `[`1`]` `[`0`]` `[`0`]` `[`0`]` - `[`2`]` -> the API version is 1.0; the FiRmware version is 1.0; 256 radial lines; 32 LEDs per radial line; monochrome image of 1 bit; images can be different for each of two wheel sides.

==Memory==
*Command 10: Get memory size*. Hardware returns the value of memory in multiples of kB, using three bytes in form: byte_1 = `<0-7>bits; byte_2 = <8-15>bits and byte _3 = <16-23>`.

Example:
   * values sent to hardware: `[`10`]`
   * values received from hardware: `[`0`]` - `[`0`]` `[`4`]` `[`0`]` -> memory of 1MB, `(0 * 2^16) + (4 * 2^8) + (0 * 2^0)` = 1024 kB.

*Command 11: Clear all memory*. Hardware returns the value of memory in multiples of kB, using three bytes in form: byte_1 = `<0-7>bits; byte_2 = <8-15>bits and byte _3 = <16-23>`.

Example:
   * values sent to hardware: `[`10`]`
   * values received from hardware: `[`0`]` - `[`0`]` `[`4`]` `[`0`]` -> memory of 1MB, `(0 * 2^16) + (4 * 2^8) + (0 * 2^0)` = 1024 kB.

*Command 12: Read memory byte*. The address is sent to hardware and the number of bytes to be used for the address depends on memory size – should be the less possible number of bytes. After send the first command, the next ones don't send the address.

Example:
   * values sent to hardware: `[`11`]` `[`0`]` `[`0`]` `[`55`]` – read byte number 55 of a memory with at least 2GB.
   * values received from hardware: `[`0`]` `[`120`]` – the value on address 55 is 120.

*Command 13: Write memory byte*. The address is sent to hardware and the number of bytes to be used for the address depends on memory size – should be the less possible number of bytes. The data byte is the last byte sent to hardware. After send the first command, the next ones don't send the address.

Warning: Before write any data to memory, memory must be all cleared, issuing the "Command 11: Clear all memory".

Example:
   * values sent to hardware: `[`13`]` `[`0`]` `[`0`]` `[`55`]` `[`60`]` – write value 60 on address number 55, on a memory with at least 2GB.
   * values received from hardware: `[`0`]`